WITH MEMBER_MONTH AS (
SELECT DISTINCT MM.POPULATION_ID,
                MM.CLAIM_SOURCE_DESCRIPTION,
                MM.PLAN_NAME,
                MM.PAYER_NAME,
                MM.MONTH_DATE_ID,
                MM.EMPI_ID,
                MM.BENEFIT_TYPE,
                MM.MONTH
FROM <ANALYST_SCHEMA>.DI_PR_MEMBER_MONTHS MM
WHERE MM.POPULATION_ID = '<POPULATION_ID>'
  AND MM.PLAN_NAME IS NOT NULL
  AND MM.PLAN_NAME NOT IN (<PLAN_NAME_EXCLUSION_LIST>)
  AND MM.CLAIM_SOURCE_DESCRIPTION IN (<ENROLLMENT_SOURCE_LIST>)
  AND MM.MONTH >= '<BEG_DATE>'
  AND MM.MONTH <= '<END_DATE>'
  AND MM.CMS_EXCLUSION_IND <> 1
)

SELECT NOW() AS SNAPSHOT_DT_TM,
       '<SCHEMA>' AS CLIENT_SCHEMA,
       'HeI' AS 'PLATFORM',
       MM.CLAIM_SOURCE_DESCRIPTION AS SOURCE_DESCRIPTION,
       MM.PAYER_NAME AS PAYER,
       NULL AS PLAN,
       CAST(TO_DATE(MM.MONTH_DATE_ID::VARCHAR, 'YYYYMMDD') AS DATE) AS MONTH,
       COUNT(DISTINCT CASE
                          WHEN MM.BENEFIT_TYPE ILIKE '%MEDICAL%' THEN MM.EMPI_ID
                      END) AS MEDICAL_MEMBER_MONTHS,
       CM.HDR_TTL_PAID_MED AS MEDICAL_TOTAL_PAID_AMOUNT,
       CM.HDR_TTL_ALLOWED_MED AS MEDICAL_TOTAL_ALLOWED_AMOUNT,
       CM.HDR_TTL_BILLED_MED AS MEDICAL_TOTAL_BILLED_AMOUNT,
       ROUND(CM.HDR_TTL_PAID_MED / COUNT(DISTINCT CASE
                                                      WHEN MM.BENEFIT_TYPE ILIKE '%MEDICAL%' THEN MM.EMPI_ID
                                                  END), 2) AS MEDICAL_PAID_PMPM,
       ROUND(CM.HDR_TTL_ALLOWED_MED / COUNT(DISTINCT CASE
                                                         WHEN MM.BENEFIT_TYPE ILIKE '%MEDICAL%' THEN MM.EMPI_ID
                                                     END), 2) AS MEDICAL_ALLOWED_PMPM,
       ROUND(CM.HDR_TTL_BILLED_MED / COUNT(DISTINCT CASE
                                                        WHEN MM.BENEFIT_TYPE ILIKE '%MEDICAL%' THEN MM.EMPI_ID
                                                    END), 2) AS MEDICAL_BILLED_PMPM,
       CM.TOTAL_MED_CLAIM_COUNT AS MEDICAL_CLAIM_COUNT,
       CM.TOTAL_MED_CLAIM_LINE_COUNT AS MEDICAL_CLAIM_LINE_COUNT,
       COUNT(DISTINCT CASE
                          WHEN MM.BENEFIT_TYPE ILIKE '%PHARMACY%' THEN MM.EMPI_ID
                      END) AS PHARMACY_MEMBER_MONTHS,
       CM.HDR_TTL_PAID_RX AS PHARMACY_TOTAL_PAID_AMOUNT,
       CM.HDR_TTL_ALLOWED_RX AS PHARMACY_TOTAL_ALLOWED_AMOUNT,
       CM.HDR_TTL_BILLED_RX AS PHARMACY_TOTAL_BILLED_AMOUNT,
       ROUND(CM.HDR_TTL_PAID_RX / COUNT(DISTINCT CASE
                                                     WHEN MM.BENEFIT_TYPE ILIKE '%PHARMACY%' THEN MM.EMPI_ID
                                                 END), 2) AS PHARMACY_PAID_PMPM,
       ROUND(CM.HDR_TTL_ALLOWED_RX / COUNT(DISTINCT CASE
                                                        WHEN MM.BENEFIT_TYPE ILIKE '%PHARMACY%' THEN MM.EMPI_ID
                                                    END), 2) AS PHARMACY_ALLOWED_PMPM,
       ROUND(CM.HDR_TTL_BILLED_RX / COUNT(DISTINCT CASE
                                                       WHEN MM.BENEFIT_TYPE ILIKE '%PHARMACY%' THEN MM.EMPI_ID
                                                   END), 2) AS PHARMACY_BILLED_PMPM,
       CM.TOTAL_RX_CLAIM_COUNT AS PHARMACY_CLAIM_COUNT,
       CM.TOTAL_RX_CLAIM_LINE_COUNT AS PHARMACY_CLAIM_LINE_COUNT,
       0::INT AS CLAIM_COUNT_FOR_PERSONS_WITH_NO_COVERAGE,
       0::INT AS CLAIM_LINE_COUNT_FOR_PERSONS_WITH_NO_COVERAGE,
       0::INT AS ACCOUNTABLE_PROVIDER_VISIT_COUNT,
       0::FLOAT AS ACCOUNTABLE_PROVIDER_VISITS_PER_1000_MBR_YRS,
       0::INT AS ACUTE_ADMIT_COUNT,
       0::INT AS ACUTE_DAYS,
       0::FLOAT AS ACUTE_AVG_LOS,
       0::FLOAT AS ACUTE_ADMITS_PER_1000_MBR_YRS,
       0::FLOAT AS ACUTE_DAYS_PER_1000_MBR_YRS,
       0::INT AS ER_ADMIT_COUNT,
       0::FLOAT AS ER_ADMITS_PER_1000_MBR_YRS,
       0::INT AS NON_SPECIALIST_VISIT_COUNT,
       0::FLOAT AS NON_SPECIALIST_VISITS_PER_1000_MBR_YRS,
       0::INT AS SPECIALIST_VISIT_COUNT,
       0::FLOAT AS SPECIALIST_VISITS_PER_1000_MBR_YRS,
       NULL AS BENEFIT_TYPE,
       MM.POPULATION_ID,
       CM.SVC_TTL_PAID_MED AS MEDICAL_SERVICE_PAID_AMOUNT,
       CM.SVC_TTL_ALLOWED_MED AS MEDICAL_SERVICE_ALLOWED_AMOUNT,
       CM.SVC_TTL_BILLED_MED AS MEDICAL_SERVICE_BILLED_AMOUNT,
       CM.SVC_TTL_PAID_RX AS PHARMACY_SERVICE_PAID_AMOUNT,
       CM.SVC_TTL_ALLOWED_RX AS PHARMACY_SERVICE_ALLOWED_AMOUNT,
       CM.SVC_TTL_BILLED_RX AS PHARMACY_SERVICE_BILLED_AMOUNT
FROM MEMBER_MONTH MM
LEFT JOIN <ANALYST_SCHEMA>.DI_F_AGG_CLAIM_METRICS CM ON (MM.CLAIM_SOURCE_DESCRIPTION = CM.SOURCE_DESCRIPTION
                                        AND MM.POPULATION_ID = CM.POPULATION_ID
                                        AND MM.MONTH_DATE_ID = CM.MONTH_DATE_ID
                                        AND CM.MEMBER_ENROLLED_IND = 1)
GROUP BY MM.CLAIM_SOURCE_DESCRIPTION,
         MM.PAYER_NAME,
         PLAN,
         CAST(TO_DATE(MM.MONTH_DATE_ID::VARCHAR, 'YYYYMMDD') AS DATE),
         CM.HDR_TTL_PAID_MED,
         CM.HDR_TTL_ALLOWED_MED,
         CM.HDR_TTL_BILLED_MED,
         CM.TOTAL_MED_CLAIM_COUNT,
         CM.TOTAL_MED_CLAIM_LINE_COUNT,
         CM.HDR_TTL_PAID_RX,
         CM.HDR_TTL_ALLOWED_RX,
         CM.HDR_TTL_BILLED_RX,
         CM.TOTAL_RX_CLAIM_COUNT,
         CM.TOTAL_RX_CLAIM_LINE_COUNT,
         MM.POPULATION_ID,
         CM.SVC_TTL_PAID_MED,
         CM.SVC_TTL_ALLOWED_MED,
         CM.SVC_TTL_BILLED_MED,
         CM.SVC_TTL_PAID_RX,
         CM.SVC_TTL_ALLOWED_RX,
         CM.SVC_TTL_BILLED_RX

UPDATE <ANALYST_SCHEMA>.DI_F_AGG_PAYER_METRICS
SET
UPDT.ACUTE_ADMIT_COUNT = ACUTE_ADMIT_COUNT
UPDT.ACUTE_DAYS = ACUTE_DAYS
UPDT.ACUTE_AVG_LOS = ACUTE_AVG_LOS
UPDT.ER_ADMIT_COUNT = ER_ADMIT_COUNT
FROM
(SELECT M.PLATFORM,
        M.POPULATION_ID,
        M.SOURCE_DESCRIPTION,
        M.MONTH,
        HA.ACUTE_ADMIT_COUNT,
        HA.ACUTE_DAYS,
        HA.ACUTE_AVG_LOS,
        HA.ER_ADMIT_COUNT
   FROM <ANALYST_SCHEMA>.DI_F_AGG_PAYER_METRICS M
   JOIN
     (SELECT HA.POPULATION_ID,
             HA.SOURCE_DESCRIPTION,
             HA.MONTH_DATE_ID,
             HA.MEMBER_ENROLLED_IND,
             SUM(HA.ACUTE_COUNT) AS ACUTE_ADMIT_COUNT,
             SUM(HA.ACUTE_DAYS_TOTAL) AS ACUTE_DAYS,
             ROUND(AVG(HA.ACUTE_DAYS_AVG), 1) AS ACUTE_AVG_LOS,
             SUM(HA.ED_ADMIT_TO_IP_COUNT) AS ER_ADMIT_COUNT
      FROM <ANALYST_SCHEMA>.DI_F_AGG_HOSP_ADM HA
      WHERE HA.POPULATION_ID = '<POPULATION_ID>'
      GROUP BY 1,
               2,
               3,
               4)HA ON (HA.POPULATION_ID = M.POPULATION_ID
   AND HA.SOURCE_DESCRIPTION = M.SOURCE_DESCRIPTION
   AND HA.MONTH_DATE_ID = CAST(REPLACE(CAST(CAST(DATE_TRUNC('month', M.MONTH) AS DATE) AS VARCHAR), '-', '') AS INT)
   AND HA.MEMBER_ENROLLED_IND = 1)
)UPDT
WHERE
DI_F_AGG_PAYER_METRICS.POPULATION_ID = UPDT.POPULATION_ID
  AND DI_F_AGG_PAYER_METRICS.SOURCE_DESCRIPTION = UPDT.SOURCE_DESCRIPTION
  AND DI_F_AGG_PAYER_METRICS.MONTH::DATE = UPDT.MONTH::DATE



UPDATE <ANALYST_SCHEMA>.DI_F_AGG_PAYER_METRICS
SET
UPDT.ACCOUNTABLE_PROVIDER_VISIT_COUNT = ACCOUNTABLE_PROVIDER_VISIT_COUNT
UPDT.NON_SPECIALIST_VISIT_COUNT = NON_SPECIALIST_VISIT_COUNT
UPDT.SPECIALIST_VISIT_COUNT = SPECIALIST_VISIT_COUNT
FROM
(SELECT
M.PLATFORM,
M.POPULATION_ID,
M.SOURCE_DESCRIPTION,
M.MONTH,
ED.ACCOUNTABLE_PROVIDER_VISIT_COUNT,
ED.NON_SPECIALIST_VISIT_COUNT,
ED.SPECIALIST_VISIT_COUNT
FROM <ANALYST_SCHEMA>.DI_F_AGG_PAYER_METRICS M
JOIN (
    SELECT AED.POPULATION_ID,
       AED.SOURCE_DESCRIPTION,
       AED.MONTH_DATE_ID,
       AED.MEMBER_ENROLLED_IND,
       SUM(AED.ACCOUNTABLE_PROVIDER_VISIT_COUNT) AS ACCOUNTABLE_PROVIDER_VISIT_COUNT,
       SUM(AED.NON_SPECIALIST_VISIT_COUNT) AS NON_SPECIALIST_VISIT_COUNT,
       SUM(AED.SPECIALIST_VISIT_COUNT) AS SPECIALIST_VISIT_COUNT
FROM <ANALYST_SCHEMA>.DI_F_AGG_ENCOUNTER_DETAIL AED
WHERE AED.POPULATION_ID = '<POPULATION_ID>'
GROUP BY 1,
         2,
         3,
         4
)ED
    ON (ED.POPULATION_ID = M.POPULATION_ID
    AND ED.SOURCE_DESCRIPTION = M.SOURCE_DESCRIPTION
    AND ED.MONTH_DATE_ID = CAST(REPLACE(CAST(CAST(DATE_TRUNC('month', M.MONTH) AS DATE) AS VARCHAR), '-', '') AS INT)
    AND ED.MEMBER_ENROLLED_IND = 1)
WHERE M.SOURCE_DESCRIPTION IN (<SOURCE_LIST>)
) UPDT
WHERE
DI_F_AGG_PAYER_METRICS.POPULATION_ID = UPDT.POPULATION_ID
AND DI_F_AGG_PAYER_METRICS.SOURCE_DESCRIPTION = UPDT.SOURCE_DESCRIPTION
AND DI_F_AGG_PAYER_METRICS.MONTH::DATE = UPDT.MONTH::DATE

UPDATE <ANALYST_SCHEMA>.DI_F_AGG_PAYER_METRICS
SET
UPDT.MEDICAL_CLAIM_COUNT + UPDT.PHARMACY_CLAIM_COUNT = CLAIM_COUNT_FOR_PERSONS_WITH_NO_COVERAGE
UPDT.MEDICAL_CLAIM_LINE_COUNT + UPDT.PHARMACY_CLAIM_LINE_COUNT = CLAIM_LINE_COUNT_FOR_PERSONS_WITH_NO_COVERAGE
FROM
(SELECT CD.POPULATION_ID,
       CD.SOURCE_DESCRIPTION,
       CAST(TO_DATE(CD.MONTH_DATE_ID::VARCHAR, 'YYYYMMDD') AS DATE) AS MONTH,
       CD.MONTH_DATE_ID,
       CD.TOTAL_MED_CLAIM_COUNT AS MEDICAL_CLAIM_COUNT,
       CD.TOTAL_MED_CLAIM_LINE_COUNT AS MEDICAL_CLAIM_LINE_COUNT,
       CD.TOTAL_RX_CLAIM_COUNT AS PHARMACY_CLAIM_COUNT,
       CD.TOTAL_RX_CLAIM_LINE_COUNT AS PHARMACY_CLAIM_LINE_COUNT
FROM <ANALYST_SCHEMA>.DI_F_AGG_CLAIM_METRICS CD
WHERE CD.SOURCE_DESCRIPTION IN (<SOURCE_LIST>)
  AND CD.MEMBER_ENROLLED_IND = 0
GROUP BY 1,
         2,
         3,
         4,
         5,
         6,
         7,
         8
) UPDT
WHERE DI_F_AGG_PAYER_METRICS.SOURCE_DESCRIPTION = UPDT.SOURCE_DESCRIPTION
AND DI_F_AGG_PAYER_METRICS.MONTH::DATE = UPDT.MONTH::DATE
